name: Publish Wino Mail Release

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: Target branch to build
        default: dev
        type: string
  schedule:
    - cron: "0 0 * * 1" # Every Monday at midnight UTC

env:
  target_branch: ${{ inputs.target_branch || 'dev' }}

jobs:
  check_tag:
    name: Check if the latest release tag is already published
    runs-on: ubuntu-latest
    outputs:
      should_publish_release: ${{ steps.check_tag.outputs.result }}
    steps:
      - name: Check the latest release tag
        id: check_tag
        uses: actions/github-script@v7
        with:
          script: |
            const { data: latestReleaseData } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const latestReleaseTag = latestReleaseData.tag_name;

            const { data: parent } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const { data: latestReleaseDataParent } = await github.rest.repos.getLatestRelease({
              owner: parent.owner,
              repo: parent.name,
            });
            const latestReleaseTagParent = latestReleaseDataParent.tag_name;

            return latestReleaseTag === latestReleaseTagParent;
          result-encoding: string

  rebase:
    name: Rebase target branch
    needs: check_tag
    if: needs.check_tag.outputs.should_publish_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2
        with:
          ref: ${{ env.target_branch }}
      - name: Configure Git
        run: |
          git config --local user.name 'GitHub Actions'
          git config --local user.email 'github-actions[bot]@users.noreply.github.com'
      - name: Rebase taget branch on upstream branch
        run: |
          git fetch upstream
          git rebase upstream/main
      - name: Push changes
        run: |
          git push origin ${{ env.target_branch }} --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-lockfiles:
    name: Update lockfiles
    needs: rebase
    permissions:
      contents: write
    uses: ./.github/workflows/generate_lockfiles.yml
    with:
      target_branch: ${{ inputs.target_branch || 'dev' }}

  build:
    name: Build app
    needs: update-lockfiles
    uses: ./.github/workflows/build.yml
    with:
      target_branch: ${{ inputs.target_branch || 'dev' }}

  publish:
    name: Publish app
    needs: build
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Download latest artifacts
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e
        with:
          pattern: Wino-Mail-*
      - name: Publish release
        uses: softprops/action-gh-release@ab50eebb6488051c6788d97fa95232267c6a4e23
        with:
          tag_name:
